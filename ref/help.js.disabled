const { prefix } = require('../config.json');
const paging = require('../helpers/paging.js');

module.exports = () => {
    return {
        name: 'help',
        cooldown: 1,
        description: 'Lists all of my commands or info about a specific command',
        aliases: ['commands'],
        usage: ['[command name]'],
        pagable: true,
        pages: [
            {
                title: 'My commands',
                description: 'Page 1',
                fields: [

                ],
            },
            {
                title: 'My commands',
                description: 'Page 2',
                fields: [

                ],
            },
        ],
        currentPage: 0,
        execute(message, args) {
            const data = [];
            const { commands } = message.client;

            if(!args.length) {
                let currentPage = 0;
                const commandEmbed = {
                    title: 'My commands',
                    description: 'Page 1',
                    fields: [
                        
                    ],
                }

                //data.push('Here\'s a list of all my commands:');
                //data.push(commands.map(command => `\`${command.name}\``).join(', '));
                //data.push(`\nYou can send \`${prefix}help [command name]\` to get info on a specific command.`);
                //return message.reply(data, { split: true });

                message.reply({ embed: commandEmbed }).then((msg) => {
                    msg.react('➡');
                });

                const filter = (reaction, user) => {
                    return reaction.emoji.name === '➡' && user.id === message.author.id;
                };

                message.awaitReactions(filter, { max: 2, time: 60000, errors: ['time']})
                    .then(() => {
                        
                    })

                return;
            }

            const name = args[0].toLowerCase();
            const command = commands.get(name) ||
                commands.find(c => c.aliases && c.aliases.includes(name));

            if(!command) {
                return message.reply('that\'s not a valid command!');
            }

            data.push(`**Name:** ${command.name}`);

            if(command.aliases) data.push(`**Aliases:** ${command.aliases.join(', ')}`);
            if(command.description) data.push(`**Description:** ${command.description}`);
            if (command.usage) {
                data.push('**Usage:**');
                command.usage.forEach(usage => data.push(`    ${prefix}${command.name} ${usage}`));
            }

            data.push(`**Cooldown:** ${command.cooldown || 3} second(s)`);

            message.channel.send(data, { split: true });
        }
    }
}
